1.20

- butcher bee
- sim support for cubee
- move configs into recipes
- no insert cage when not sim
- proper sugarbag nest spawn (mangrove and jungle)
- fix up Create mixin recipes to support more stuff and fix disable conditions
- sticky sponge, sponge soaking up honey becomes sticky instead of wet, eat it to clean it
- increased crop pollination for solitary bees
- add honey cauldron for crafting honey blocks
- undead bee spawns as recipes
- blue carpenter bee
- orchid bee https://www.google.com/search?q=orchid+bee&sxsrf=AJOqlzU5ZPQMPhFeLTNSlbSrx0tya09LrA:1675839923020&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi-jr-aroX9AhWKgP0HHYJjCKUQ_AUoAXoECAEQAw&biw=1920&bih=973&dpr=1#imgrc=m4vpRlNWuNOYSM
- bee cage ingredient
- custom comb textures
- show bee name when in jar
- twilight forest bees
- beekeeper house
- show fake bee outside simulated hive.
- GUI revamp for fluid and power indicators
- bee spawn blocks (custom nests)
- more bee helmet versions
- bee helmet enchants to increase kamikaz spawn chance
- achievement for kamikaz spawning
- easter, Christmas and halloween models




    public static final GTOreDefinition BAUXITE_VEIN_END = create("bauxite_vein_end", vein -> vein
            .layer(l -> l.weight(2).state(Blocks.END_STONE::defaultBlockState).size(1, 6))
            .layer(l -> l.weight(2).mat(Bauxite).size(1, 4))
            .layer(l -> l.weight(1).mat(Ilmenite).size(1, 2))
            .layer(l -> l.weight(1).mat(Aluminium).size(1, 1))

    public static final GTOreDefinition MAGNETITE_VEIN_END = create("magnetite_vein_end", vein -> vein
            .layer(l -> l.weight(3).mat(Magnetite).size(1, 4))
            .layer(l -> l.weight(2).mat(VanadiumMagnetite).size(1, 2))
            .layer(l -> l.weight(2).mat(Chromite).size(1, 1))

    public static final GTOreDefinition NAQUADAH_VEIN = create("naquadah_vein", vein -> vein
            .oreBlock(new VeinBlockDefinition(Naquadah, 3))
            .rareBlock(new VeinBlockDefinition(Plutonium239, 1))

    public static final GTOreDefinition PITCHBLENDE_VEIN = create("pitchblende_vein_end", vein -> vein
            .oreBlock(new VeinBlockDefinition(Pitchblende, 3))
            .rareBlock(new VeinBlockDefinition(Uraninite, 2))

    public static final GTOreDefinition SCHEELITE_VEIN = create("scheelite_vein", vein -> vein
            .withBlock(new DikeBlockDefinition(Scheelite, 3, 20, 60))
            .withBlock(new DikeBlockDefinition(Tungstate, 2, 35, 55))
            .withBlock(new DikeBlockDefinition(Lithium, 1, 20, 40))

    public static final GTOreDefinition SHELDONITE_VEIN = create("sheldonite_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Bornite).size(2, 4))
            .layer(l -> l.weight(2).mat(Cooperite).size(1, 1))
            .layer(l -> l.weight(2).mat(Platinum).size(1, 1))
            .layer(l -> l.weight(1).mat(Palladium).size(1, 1))

    public static final GTOreDefinition BANDED_IRON_VEIN = create("banded_iron_vein", vein -> vein
            .oreBlock(new VeinBlockDefinition(Goethite, 3))
            .oreBlock(new VeinBlockDefinition(YellowLimonite, 2))
            .oreBlock(new VeinBlockDefinition(Hematite, 2))

    public static final GTOreDefinition BERYLLIUM_VEIN = create("beryllium_vein", vein -> vein
            .withBlock(new DikeBlockDefinition(Beryllium, 3, 5, 30))

    public static final GTOreDefinition CERTUS_QUARTZ_VEIN = create("certus_quartz", vein -> vein
            .layer(l -> l.weight(3).mat(Quartzite).size(2, 4))
            .layer(l -> l.weight(2).mat(CertusQuartz).size(1, 1))
            .layer(l -> l.weight(1).mat(Barite).size(1, 1))

    public static final GTOreDefinition MANGANESE_VEIN = create("manganese_vein", vein -> vein
            .withBlock(new DikeBlockDefinition(Grossular, 3, 20, 30))
            .withBlock(new DikeBlockDefinition(Pyrolusite, 2, 20, 26))
            .withBlock(new DikeBlockDefinition(Tantalite, 1, 24, 30))

    public static final GTOreDefinition MOLYBDENUM_VEIN = create("molybdenum_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Wulfenite).size(2, 4))
            .layer(l -> l.weight(2).mat(Molybdenite).size(1, 1))
            .layer(l -> l.weight(1).mat(Molybdenum).size(1, 1))
            .layer(l -> l.weight(1).mat(Powellite).size(1, 1))

    public static final GTOreDefinition MONAZITE_VEIN = create("monazite_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Bastnasite).size(2, 4))
            .layer(l -> l.weight(1).mat(Molybdenum).size(1, 1))
            .layer(l -> l.weight(1).mat(Neodymium).size(1, 1))

    public static final GTOreDefinition NETHER_QUARTZ_VEIN = create("nether_quartz_vein", vein -> vein
            .layer(l -> l.weight(3).mat(NetherQuartz).size(2, 4))
            .layer(l -> l.weight(1).mat(Quartzite).size(1, 1))

    public static final GTOreDefinition REDSTONE_VEIN = create("redstone_vein", vein -> vein
            .layer(l -> l.weight(2).mat(Ruby).size(1, 1))
            .layer(l -> l.weight(1).mat(Cinnabar).size(1, 1))

    public static final GTOreDefinition SALTPETER_VEIN = create("saltpeter_vein", vein -> vein
            .layer(l -> l.weight(2).state(Blocks.NETHERRACK::defaultBlockState))
            .layer(l -> l.weight(3).mat(Saltpeter).size(2, 4))
            .layer(l -> l.weight(2).mat(Diatomite).size(1, 1))
            .layer(l -> l.weight(2).mat(Electrotine).size(1, 1))
            .layer(l -> l.weight(1).mat(Alunite).size(1, 1))

    public static final GTOreDefinition SULFUR_VEIN = create("sulfur_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Sulfur).size(2, 4))
            .layer(l -> l.weight(2).mat(Pyrite).size(1, 1))
            .layer(l -> l.weight(1).mat(Sphalerite).size(1, 1))

    public static final GTOreDefinition TETRAHEDRITE_VEIN = create("tetrahedrite_vein", vein -> vein
            .oreBlock(new VeinBlockDefinition(Tetrahedrite, 4))
            .rareBlock(new VeinBlockDefinition(Stibnite, 1))

    public static final GTOreDefinition TOPAZ_VEIN = create("topaz_vein", vein -> vein
            .layer(l -> l.weight(3).mat(BlueTopaz).size(2, 4))
            .layer(l -> l.weight(2).mat(Topaz).size(1, 1))
            .layer(l -> l.weight(2).mat(Chalcocite).size(1, 1))
            .layer(l -> l.weight(1).mat(Bornite).size(1, 1))

    public static final GTOreDefinition APATITE_VEIN = create("apatite_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Apatite).size(2, 4))
            .layer(l -> l.weight(2).mat(TricalciumPhosphate).size(1, 1))
            .layer(l -> l.weight(1).mat(Pyrochlore).size(1, 1))

    public static final GTOreDefinition CASSITERITE_VEIN = create("cassiterite_vein", vein -> vein
            .rareBlock(new VeinBlockDefinition(Cassiterite, 2))

    public static final GTOreDefinition COPPER_TIN_VEIN = create("copper_tin_vein", vein -> vein
            .oreBlock(new VeinBlockDefinition(Chalcopyrite, 5))
            .oreBlock(new VeinBlockDefinition(Zeolite, 2))
            .oreBlock(new VeinBlockDefinition(Cassiterite, 2))
            .rareBlock(new VeinBlockDefinition(Realgar, 1))

    public static final GTOreDefinition GALENA_VEIN = create("galena_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Galena).size(2, 4))
            .layer(l -> l.weight(2).mat(Silver).size(1, 1))
            .layer(l -> l.weight(1).mat(Lead).size(1, 1))

    public static final GTOreDefinition GARNET_TIN_VEIN = create("garnet_tin_vein", vein -> vein
            .layer(l -> l.weight(3).mat(CassiteriteSand).size(2, 4))
            .layer(l -> l.weight(2).mat(GarnetSand).size(1, 1))
            .layer(l -> l.weight(2).mat(Asbestos).size(1, 1))
            .layer(l -> l.weight(1).mat(Diatomite).size(1, 1))

    public static final GTOreDefinition GARNET_VEIN = create("garnet_vein", vein -> vein
            .withBlock(new DikeBlockDefinition(GarnetRed, 3, -10, 50))
            .withBlock(new DikeBlockDefinition(GarnetYellow, 2, -10, 50))
            .withBlock(new DikeBlockDefinition(Amethyst, 2, -10, 22))
            .withBlock(new DikeBlockDefinition(Opal, 1, 18, 50))

    public static final GTOreDefinition IRON_VEIN = create("iron_vein", vein -> vein
            .oreBlock(new VeinBlockDefinition(Goethite, 5))
            .oreBlock(new VeinBlockDefinition(YellowLimonite, 2))
            .oreBlock(new VeinBlockDefinition(Hematite, 2))
            .oreBlock(new VeinBlockDefinition(Malachite, 1))

    public static final GTOreDefinition LUBRICANT_VEIN = create("lubricant_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Soapstone).size(2, 4))
            .layer(l -> l.weight(2).mat(Talc).size(1, 1))
            .layer(l -> l.weight(2).mat(GlauconiteSand).size(1, 1))
            .layer(l -> l.weight(1).mat(Pentlandite).size(1, 1))

    public static final GTOreDefinition MAGNETITE_VEIN_OW = create("magnetite_vein_ow", vein -> vein
            .layer(l -> l.weight(3).mat(Magnetite).size(2, 4))
            .layer(l -> l.weight(2).mat(VanadiumMagnetite).size(1, 1))

    public static final GTOreDefinition MINERAL_SAND_VEIN = create("mineral_sand_vein", vein -> vein
            .layer(l -> l.weight(2).state(Blocks.SAND::defaultBlockState))
            .layer(l -> l.weight(3).mat(BasalticMineralSand).size(2, 4))
            .layer(l -> l.weight(2).mat(GraniticMineralSand).size(1, 1))
            .layer(l -> l.weight(2).mat(FullersEarth).size(1, 1))
            .layer(l -> l.weight(1).mat(Gypsum).size(1, 1))

    public static final GTOreDefinition NICKEL_VEIN = create("nickel_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Garnierite).size(2, 4))
            .layer(l -> l.weight(2).mat(Nickel).size(1, 1))
            .layer(l -> l.weight(2).mat(Cobaltite).size(1, 1))
            .layer(l -> l.weight(1).mat(Pentlandite).size(1, 1))

    public static final GTOreDefinition SALTS_VEIN = create("salts_vein", vein -> vein
            .layer(l -> l.weight(3).mat(RockSalt).size(2, 4))
            .layer(l -> l.weight(2).mat(Salt).size(1, 1))
            .layer(l -> l.weight(1).mat(Lepidolite).size(1, 1))
            .layer(l -> l.weight(1).mat(Spodumene).size(1, 1))

    public static final GTOreDefinition OILSANDS_VEIN = create("oilsands_vein", vein -> vein
            .layer(l -> l.weight(1).mat(Oilsands).size(1, 1))

    public static final GTOreDefinition COPPER_VEIN = create("copper_vein", vein -> vein
            .oreBlock(new VeinBlockDefinition(Chalcopyrite, 5))
            .oreBlock(new VeinBlockDefinition(Pyrite, 2))

    public static final GTOreDefinition DIAMOND_VEIN = create("diamond_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Graphite).size(2, 4))

    public static final GTOreDefinition LAPIS_VEIN = create("lapis_vein", vein -> vein
            .withBlock(new DikeBlockDefinition(Lazurite, 3, -60, 10))
            .withBlock(new DikeBlockDefinition(Sodalite, 2, -50, 0))
            .withBlock(new DikeBlockDefinition(Calcite, 1, -40, 10))

    public static final GTOreDefinition MANGANESE_VEIN_OW = create("manganese_vein_ow", vein -> vein
            .withBlock(new DikeBlockDefinition(Grossular, 3, -50, -5))
            .withBlock(new DikeBlockDefinition(Spessartine, 2, -40, -15))
            .withBlock(new DikeBlockDefinition(Pyrolusite, 2, -40, -15))
            .withBlock(new DikeBlockDefinition(Tantalite, 1, -30, -5))

    public static final GTOreDefinition MICA_VEIN = create("mica_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Kyanite).size(2, 4))
            .layer(l -> l.weight(2).mat(Mica).size(1, 1))
            .layer(l -> l.weight(2).mat(Bauxite).size(1, 1))
            .layer(l -> l.weight(1).mat(Pollucite).size(1, 1))

    public static final GTOreDefinition OLIVINE_VEIN = create("olivine_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Bentonite).size(2, 4))
            .layer(l -> l.weight(2).mat(Magnetite).size(1, 1))
            .layer(l -> l.weight(2).mat(Olivine).size(1, 1))
            .layer(l -> l.weight(1).mat(GlauconiteSand).size(1, 1))

    public static final GTOreDefinition REDSTONE_VEIN_OW = create("redstone_vein_ow", vein -> vein
            .layer(l -> l.weight(2).mat(Ruby).size(1, 1))
            .layer(l -> l.weight(1).mat(Cinnabar).size(1, 1))

    public static final GTOreDefinition SAPPHIRE_VEIN = create("sapphire_vein", vein -> vein
            .layer(l -> l.weight(3).mat(Almandine).size(2, 4))
            .layer(l -> l.weight(2).mat(Pyrope).size(1, 1))
            .layer(l -> l.weight(1).mat(Sapphire).size(1, 1))
            .layer(l -> l.weight(1).mat(GreenSapphire).size(1, 1))
