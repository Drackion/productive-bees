plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.120'
    id "org.sonarqube" version "3.1.1"
}

//jarJar.enable()
////tasks.jarJar.configure {
////    archiveClassifier.set('')
////}
////tasks.build.dependsOn tasks.jarJar
//
//tasks.named('jarJar') {
//    archiveClassifier.set('')
//}
//jar.finalizedBy('reobfJarJar')

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation "local.libs:productivelib-${minecraft_version}-${lib_version}"

//    jarJar(group: 'cy.jdkdigital.productivelib', name: 'productivelib', version: '[0.0.4,)') {
//        transitive(false)
//    }

//    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
//
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
//
//    compileOnly(fg.deobf("com.almostreliable.mods:almostunified-forge:${minecraft_version}-${au_version}"))

//    implementation fg.deobf("curse.maven:jei-238222:4712868")
    implementation "curse.maven:jade-324717:5288504"
//    implementation fg.deobf("curse.maven:the-one-probe-245211:4579432")
    implementation "curse.maven:emi-580555:5311320"
//    implementation fg.deobf("curse.maven:curios-309927:4985525")
//    implementation fg.deobf("curse.maven:corail-woodcutter-331983:4573934")
//    implementation fg.deobf("curse.maven:create-328085:4626108")
//    implementation fg.deobf("curse.maven:pams-harvestcraft-2-trees-365460:4625518")
//    implementation fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:4687624")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "JDK Digital",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "JDK Digital",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "JDKDigital_productive-bees"
        property "sonar.organization", "jdkdigital"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
